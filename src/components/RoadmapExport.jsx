import React, { useState } from 'react';
import { Download, Share2, FileText, Image, Link, Check, Copy } from 'lucide-react';
import './RoadmapExport.css';

const RoadmapExport = ({ roadmapData }) => {
  const [showExportMenu, setShowExportMenu] = useState(false);
  const [showShareMenu, setShowShareMenu] = useState(false);
  const [copied, setCopied] = useState(false);

  const generateShareableLink = () => {
    // In a real application, this would generate a unique link to share the roadmap
    const baseUrl = window.location.origin;
    const roadmapId = roadmapData.id;
    return `${baseUrl}/shared/${roadmapId}`;
  };

  const exportToPDF = () => {
    // Create a simple PDF-like text representation
    const content = generateTextContent();
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${roadmapData.title.replace(/\s+/g, '-')}-roadmap.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    setShowExportMenu(false);
  };

  const exportToJSON = () => {
    const dataStr = JSON.stringify(roadmapData, null, 2);
    const blob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${roadmapData.title.replace(/\s+/g, '-')}-roadmap.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    setShowExportMenu(false);
  };

  const exportToMarkdown = () => {
    const content = generateMarkdownContent();
    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${roadmapData.title.replace(/\s+/g, '-')}-roadmap.md`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    setShowExportMenu(false);
  };

  const copyToClipboard = async () => {
    try {
      const shareLink = generateShareableLink();
      await navigator.clipboard.writeText(shareLink);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
    }
  };

  const shareViaEmail = () => {
    const subject = encodeURIComponent(`Check out my learning roadmap: ${roadmapData.title}`);
    const body = encodeURIComponent(`I've created a personalized learning roadmap for ${roadmapData.userProfile.domain}!\n\nRoadmap: ${roadmapData.title}\nDuration: ${roadmapData.estimatedDuration.weeks} weeks\nTime commitment: ${roadmapData.userProfile.timeCommitment} hours/week\n\nView it here: ${generateShareableLink()}\n\nGenerated by Flow Roadmap Generator`);
    window.open(`mailto:?subject=${subject}&body=${body}`);
    setShowShareMenu(false);
  };

  const shareViaTwitter = () => {
    const text = encodeURIComponent(`Just created my personalized ${roadmapData.userProfile.domain} learning roadmap! ðŸš€ ${roadmapData.estimatedDuration.weeks} weeks to mastery. Check it out:`);
    const url = encodeURIComponent(generateShareableLink());
    window.open(`https://twitter.com/intent/tweet?text=${text}&url=${url}&hashtags=learning,AI,roadmap`);
    setShowShareMenu(false);
  };

  const shareViaLinkedIn = () => {
    const url = encodeURIComponent(generateShareableLink());
    const title = encodeURIComponent(roadmapData.title);
    const summary = encodeURIComponent(`My personalized ${roadmapData.userProfile.domain} learning roadmap - ${roadmapData.estimatedDuration.weeks} weeks to mastery!`);
    window.open(`https://linkedin.com/sharing/share-offsite/?url=${url}&title=${title}&summary=${summary}`);
    setShowShareMenu(false);
  };

  const generateTextContent = () => {
    let content = `${roadmapData.title}\n`;
    content += `${'='.repeat(roadmapData.title.length)}\n\n`;
    content += `${roadmapData.description}\n\n`;
    
    content += `LEARNING PROFILE\n`;
    content += `---------------\n`;
    content += `Level: ${roadmapData.userProfile.level}\n`;
    content += `Time Commitment: ${roadmapData.userProfile.timeCommitment} hours/week\n`;
    content += `Domain: ${roadmapData.userProfile.domain}\n`;
    content += `Estimated Duration: ${roadmapData.estimatedDuration.weeks} weeks (${roadmapData.estimatedDuration.months} months)\n\n`;
    
    roadmapData.roadmap.phases.forEach((phase, phaseIndex) => {
      content += `PHASE ${phaseIndex + 1}: ${phase.title.toUpperCase()}\n`;
      content += `${'-'.repeat(phase.title.length + 10)}\n`;
      content += `${phase.description}\n\n`;
      
      phase.topics.forEach((topic, topicIndex) => {
        content += `  ${topicIndex + 1}. ${topic.title}\n`;
        content += `     ${topic.description}\n`;
        content += `     Duration: ${topic.duration} | Difficulty: ${topic.difficulty} | Type: ${topic.type}\n\n`;
      });
      content += '\n';
    });
    
    return content;
  };

  const generateMarkdownContent = () => {
    let content = `# ${roadmapData.title}\n\n`;
    content += `${roadmapData.description}\n\n`;
    
    content += `## Learning Profile\n\n`;
    content += `- **Level:** ${roadmapData.userProfile.level}\n`;
    content += `- **Time Commitment:** ${roadmapData.userProfile.timeCommitment} hours/week\n`;
    content += `- **Domain:** ${roadmapData.userProfile.domain}\n`;
    content += `- **Estimated Duration:** ${roadmapData.estimatedDuration.weeks} weeks (${roadmapData.estimatedDuration.months} months)\n\n`;
    
    roadmapData.roadmap.phases.forEach((phase, phaseIndex) => {
      content += `## Phase ${phaseIndex + 1}: ${phase.title}\n\n`;
      content += `${phase.description}\n\n`;
      
      phase.topics.forEach((topic, topicIndex) => {
        content += `### ${topicIndex + 1}. ${topic.title}\n\n`;
        content += `${topic.description}\n\n`;
        content += `- **Duration:** ${topic.duration}\n`;
        content += `- **Difficulty:** ${topic.difficulty}\n`;
        content += `- **Type:** ${topic.type}\n\n`;
        
        if (roadmapData.resources[topic.id]) {
          content += `**Recommended Resources:**\n`;
          roadmapData.resources[topic.id].forEach(resource => {
            if (resource) {
              content += `- [${resource.title}](${resource.url})\n`;
            }
          });
          content += '\n';
        }
      });
    });
    
    content += `---\n\n`;
    content += `*Generated by Flow Roadmap Generator*\n`;
    
    return content;
  };

  return (
    <div className="roadmap-export">
      <div className="export-actions">
        <div className="export-dropdown">
          <button 
            className="export-button"
            onClick={() => setShowExportMenu(!showExportMenu)}
          >
            <Download className="icon" />
            Export
          </button>
          
          {showExportMenu && (
            <div className="dropdown-menu">
              <button onClick={exportToMarkdown} className="dropdown-item">
                <FileText className="icon" />
                Markdown (.md)
              </button>
              <button onClick={exportToPDF} className="dropdown-item">
                <FileText className="icon" />
                Text File (.txt)
              </button>
              <button onClick={exportToJSON} className="dropdown-item">
                <FileText className="icon" />
                JSON Data (.json)
              </button>
            </div>
          )}
        </div>

        <div className="share-dropdown">
          <button 
            className="share-button"
            onClick={() => setShowShareMenu(!showShareMenu)}
          >
            <Share2 className="icon" />
            Share
          </button>
          
          {showShareMenu && (
            <div className="dropdown-menu">
              <button onClick={copyToClipboard} className="dropdown-item">
                {copied ? <Check className="icon" /> : <Copy className="icon" />}
                {copied ? 'Copied!' : 'Copy Link'}
              </button>
              <button onClick={shareViaEmail} className="dropdown-item">
                <FileText className="icon" />
                Email
              </button>
              <button onClick={shareViaTwitter} className="dropdown-item">
                <Share2 className="icon" />
                Twitter
              </button>
              <button onClick={shareViaLinkedIn} className="dropdown-item">
                <Share2 className="icon" />
                LinkedIn
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default RoadmapExport;